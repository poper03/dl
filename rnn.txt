import pandas as pd
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from keras.datasets import reuters
import tensorflow as tf
from tensorflow.keras.preprocessing.sequence import pad_sequences
from keras.models import Sequential
from tensorflow.keras.utils import to_categorical
from keras.layers import Dense, SimpleRNN, Activation, LSTM, GRU
from tensorflow.keras.optimizers import Adam
from sklearn.metrics import accuracy_score

#Initializing the values
num_words = None
maxlen = 50
test_split = 0.3

#Splitting the dataset into train and test sets
(x_train,y_train),(x_test,y_test) = reuters.load_data(num_words = num_words, maxlen = maxlen,
test_split = test_split)

print(x_train.shape)
print(x_test.shape)
print(y_train.shape)
print(y_test.shape)

from numpy.core.fromnumeric import shape
x_train = pad_sequences(x_train, padding = 'post')
x_test = pad_sequences(x_test, padding = 'post')
x_train = np.array(x_train).reshape((x_train.shape[0],x_train.shape[1],1))
x_test = np.array(x_test).reshape((x_test.shape[0],x_test.shape[1],1))

x_train.shape, x_test.shape

y_train.shape, y_test.shape

y_data = np.concatenate((y_train,y_test))
y_data = to_categorical(y_data)

y_train = y_data[:1395]
y_test = y_data[1395:]

#Simple RNN
model = Sequential()
model.add(SimpleRNN(50, input_shape=(49,1)))
model.add(Dense(46))
model.add(Activation('softmax'))
adam = Adam(learning_rate = 0.001)

#Model compilation
model.compile(loss = 'categorical_crossentropy', optimizer = adam, metrics = ['accuracy'])
model.fit(x_train,y_train, epochs = 100, validation_split=0.3)

#Model Evaluation
y_pred = np.argmax(model.predict(x_test),axis = 1)
y_test = np.argmax(y_test, axis = 1)
print(accuracy_score(y_pred,y_test))

#LSTM
#Model Creation
ls = Sequential()
ls.add(LSTM(50, input_shape=(49,1)))
ls.add(Dense(46))
ls.add(Activation('softmax'))

from keras import metrics
adam = Adam(learning_rate = 0.001)

#Model compilation
ls.compile(loss = 'categorical_crossentropy', optimizer = adam, metrics = ['accuracy'])
ls.fit(x_train,y_train, epochs = 100, validation_split=0.3)

#Model Evaluation
y_pred = np.argmax(ls.predict(x_test), axis = 1)
#y_test = np.argmax(y_test,axis = 1)
print(accuracy_score(y_pred, y_test))

#GRU
#Model Creation
gr = Sequential()
gr.add(GRU(50, input_shape=(49,1)))
gr.add(Dense(46))
gr.add(Activation('sigmoid'))

#Model compilation
gr.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics = ['accuracy'])
gr.fit(x_train,y_train, epochs = 10, validation_split = 0.3)

#Model Evaluation
y_pred = np.argmax(gr.predict(x_test), axis = 1)
#y_test = np.argmax(y_test,axis = 1)
print(accuracy_score(y_pred, y_test))